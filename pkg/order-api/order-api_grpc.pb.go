// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: order-api/order-api.proto

package order_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderApiClient is the client API for OrderApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderApiClient interface {
	// ручка для создания нового заказа
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	// ручка для получения всех имеющихся в системе заказов
	GetAllOrders(ctx context.Context, in *GetAllOrdersRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	// ручка для получения заказа по его идентификатору
	GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error)
	// ручка для отмены заказа по его идентификатору
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// ручка для изменения статуса заказа
	ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
	// ручка для обнуления стоимости заказа по его идентификатору
	ResetOrderPrice(ctx context.Context, in *ResetOrderPriceRequest, opts ...grpc.CallOption) (*ResetOrderPriceResponse, error)
	// ручка для получения данных по заказу в стриме
	GetAllOrdersStream(ctx context.Context, opts ...grpc.CallOption) (OrderApi_GetAllOrdersStreamClient, error)
}

type orderApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderApiClient(cc grpc.ClientConnInterface) OrderApiClient {
	return &orderApiClient{cc}
}

func (c *orderApiClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/app.go.order.OrderApi/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) GetAllOrders(ctx context.Context, in *GetAllOrdersRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/app.go.order.OrderApi/GetAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error) {
	out := new(GetOrderByIdResponse)
	err := c.cc.Invoke(ctx, "/app.go.order.OrderApi/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/app.go.order.OrderApi/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/app.go.order.OrderApi/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) ResetOrderPrice(ctx context.Context, in *ResetOrderPriceRequest, opts ...grpc.CallOption) (*ResetOrderPriceResponse, error) {
	out := new(ResetOrderPriceResponse)
	err := c.cc.Invoke(ctx, "/app.go.order.OrderApi/ResetOrderPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) GetAllOrdersStream(ctx context.Context, opts ...grpc.CallOption) (OrderApi_GetAllOrdersStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderApi_ServiceDesc.Streams[0], "/app.go.order.OrderApi/GetAllOrdersStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderApiGetAllOrdersStreamClient{stream}
	return x, nil
}

type OrderApi_GetAllOrdersStreamClient interface {
	Send(*GetOrderByIdRequest) error
	Recv() (*GetOrderByIdResponse, error)
	grpc.ClientStream
}

type orderApiGetAllOrdersStreamClient struct {
	grpc.ClientStream
}

func (x *orderApiGetAllOrdersStreamClient) Send(m *GetOrderByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderApiGetAllOrdersStreamClient) Recv() (*GetOrderByIdResponse, error) {
	m := new(GetOrderByIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderApiServer is the server API for OrderApi service.
// All implementations must embed UnimplementedOrderApiServer
// for forward compatibility
type OrderApiServer interface {
	// ручка для создания нового заказа
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	// ручка для получения всех имеющихся в системе заказов
	GetAllOrders(context.Context, *GetAllOrdersRequest) (*GetAllOrdersResponse, error)
	// ручка для получения заказа по его идентификатору
	GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error)
	// ручка для отмены заказа по его идентификатору
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// ручка для изменения статуса заказа
	ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
	// ручка для обнуления стоимости заказа по его идентификатору
	ResetOrderPrice(context.Context, *ResetOrderPriceRequest) (*ResetOrderPriceResponse, error)
	// ручка для получения данных по заказу в стриме
	GetAllOrdersStream(OrderApi_GetAllOrdersStreamServer) error
	mustEmbedUnimplementedOrderApiServer()
}

// UnimplementedOrderApiServer must be embedded to have forward compatible implementations.
type UnimplementedOrderApiServer struct {
}

func (UnimplementedOrderApiServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderApiServer) GetAllOrders(context.Context, *GetAllOrdersRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedOrderApiServer) GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderApiServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderApiServer) ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedOrderApiServer) ResetOrderPrice(context.Context, *ResetOrderPriceRequest) (*ResetOrderPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetOrderPrice not implemented")
}
func (UnimplementedOrderApiServer) GetAllOrdersStream(OrderApi_GetAllOrdersStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrdersStream not implemented")
}
func (UnimplementedOrderApiServer) mustEmbedUnimplementedOrderApiServer() {}

// UnsafeOrderApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderApiServer will
// result in compilation errors.
type UnsafeOrderApiServer interface {
	mustEmbedUnimplementedOrderApiServer()
}

func RegisterOrderApiServer(s grpc.ServiceRegistrar, srv OrderApiServer) {
	s.RegisterService(&OrderApi_ServiceDesc, srv)
}

func _OrderApi_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.go.order.OrderApi/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.go.order.OrderApi/GetAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).GetAllOrders(ctx, req.(*GetAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.go.order.OrderApi/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).GetOrderById(ctx, req.(*GetOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.go.order.OrderApi/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.go.order.OrderApi/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).ChangeStatus(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_ResetOrderPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetOrderPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).ResetOrderPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.go.order.OrderApi/ResetOrderPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).ResetOrderPrice(ctx, req.(*ResetOrderPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_GetAllOrdersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderApiServer).GetAllOrdersStream(&orderApiGetAllOrdersStreamServer{stream})
}

type OrderApi_GetAllOrdersStreamServer interface {
	Send(*GetOrderByIdResponse) error
	Recv() (*GetOrderByIdRequest, error)
	grpc.ServerStream
}

type orderApiGetAllOrdersStreamServer struct {
	grpc.ServerStream
}

func (x *orderApiGetAllOrdersStreamServer) Send(m *GetOrderByIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderApiGetAllOrdersStreamServer) Recv() (*GetOrderByIdRequest, error) {
	m := new(GetOrderByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderApi_ServiceDesc is the grpc.ServiceDesc for OrderApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.go.order.OrderApi",
	HandlerType: (*OrderApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderApi_CreateOrder_Handler,
		},
		{
			MethodName: "GetAllOrders",
			Handler:    _OrderApi_GetAllOrders_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _OrderApi_GetOrderById_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderApi_CancelOrder_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _OrderApi_ChangeStatus_Handler,
		},
		{
			MethodName: "ResetOrderPrice",
			Handler:    _OrderApi_ResetOrderPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllOrdersStream",
			Handler:       _OrderApi_GetAllOrdersStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "order-api/order-api.proto",
}
