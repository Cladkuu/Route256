// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "gitlab.ozon.dev/astoyakin/route256/internal/app/model"

	pgx "github.com/jackc/pgx/v4"
)

// OrderRepositoryMock is an autogenerated mock type for the OrderRepositoryMock type
type OrderRepositoryMock struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: ctx, transaction, id
func (_m *OrderRepositoryMock) CancelOrder(ctx context.Context, transaction pgx.Tx, id int64) error {
	ret := _m.Called(ctx, transaction, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, int64) error); ok {
		r0 = rf(ctx, transaction, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeStatus provides a mock function with given fields: ctx, transaction, id, status
func (_m *OrderRepositoryMock) ChangeStatus(ctx context.Context, transaction pgx.Tx, id int64, status string) error {
	ret := _m.Called(ctx, transaction, id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, int64, string) error); ok {
		r0 = rf(ctx, transaction, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, transaction, price, currency, orderCode
func (_m *OrderRepositoryMock) CreateOrder(ctx context.Context, transaction pgx.Tx, price int32, currency string, orderCode string) (int64, error) {
	ret := _m.Called(ctx, transaction, price, currency, orderCode)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, int32, string, string) int64); ok {
		r0 = rf(ctx, transaction, price, currency, orderCode)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, int32, string, string) error); ok {
		r1 = rf(ctx, transaction, price, currency, orderCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: ctx, transaction, page, pageSize, sortCriteria
func (_m *OrderRepositoryMock) GetAllOrders(ctx context.Context, transaction pgx.Tx, page int32, pageSize int32, sortCriteria string) ([]*model.Order, error) {
	ret := _m.Called(ctx, transaction, page, pageSize, sortCriteria)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, int32, int32, string) []*model.Order); ok {
		r0 = rf(ctx, transaction, page, pageSize, sortCriteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, int32, int32, string) error); ok {
		r1 = rf(ctx, transaction, page, pageSize, sortCriteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: ctx, transaction, id
func (_m *OrderRepositoryMock) GetOrderById(ctx context.Context, transaction pgx.Tx, id int64) (*model.Order, error) {
	ret := _m.Called(ctx, transaction, id)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, int64) *model.Order); ok {
		r0 = rf(ctx, transaction, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, int64) error); ok {
		r1 = rf(ctx, transaction, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetOrderPrice provides a mock function with given fields: ctx, transaction, id
func (_m *OrderRepositoryMock) ResetOrderPrice(ctx context.Context, transaction pgx.Tx, id int64) error {
	ret := _m.Called(ctx, transaction, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, int64) error); ok {
		r0 = rf(ctx, transaction, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderRepositoryMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepositoryMock creates a new instance of OrderRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepositoryMock(t mockConstructorTestingTNewOrderRepositoryMock) *OrderRepositoryMock {
	mock := &OrderRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
