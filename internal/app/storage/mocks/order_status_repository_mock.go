// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"
)

// OrderStatusRepositoryMock is an autogenerated mock type for the OrderStatusRepositoryMock type
type OrderStatusRepositoryMock struct {
	mock.Mock
}

// FindStatuses provides a mock function with given fields: statusFrom, statusTo
func (_m *OrderStatusRepositoryMock) FindStatuses(statusFrom string, statusTo string) (bool, error) {
	ret := _m.Called(statusFrom, statusTo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(statusFrom, statusTo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(statusFrom, statusTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateStatuses provides a mock function with given fields: ctx, transaction, statusFrom, statusTo
func (_m *OrderStatusRepositoryMock) ValidateStatuses(ctx context.Context, transaction pgx.Tx, statusFrom string, statusTo string) error {
	ret := _m.Called(ctx, transaction, statusFrom, statusTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, string, string) error); ok {
		r0 = rf(ctx, transaction, statusFrom, statusTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateStatusesV2 provides a mock function with given fields: ctx, transaction, id, statusTo
func (_m *OrderStatusRepositoryMock) ValidateStatusesV2(ctx context.Context, transaction pgx.Tx, id int64, statusTo string) error {
	ret := _m.Called(ctx, transaction, id, statusTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, int64, string) error); ok {
		r0 = rf(ctx, transaction, id, statusTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderStatusRepositoryMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderStatusRepositoryMock creates a new instance of OrderStatusRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderStatusRepositoryMock(t mockConstructorTestingTNewOrderStatusRepositoryMock) *OrderStatusRepositoryMock {
	mock := &OrderStatusRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
