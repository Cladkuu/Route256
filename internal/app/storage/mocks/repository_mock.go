// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryMock is an autogenerated mock type for the RepositoryMock type
type RepositoryMock struct {
	mock.Mock
}

// CommitTransaction provides a mock function with given fields: ctx, transaction
func (_m *RepositoryMock) CommitTransaction(ctx context.Context, transaction pgx.Tx) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransaction provides a mock function with given fields: ctx, TxOptions
func (_m *RepositoryMock) GetTransaction(ctx context.Context, TxOptions pgx.TxOptions) (pgx.Tx, context.Context, error) {
	ret := _m.Called(ctx, TxOptions)

	var r0 pgx.Tx
	if rf, ok := ret.Get(0).(func(context.Context, pgx.TxOptions) pgx.Tx); ok {
		r0 = rf(ctx, TxOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}

	var r1 context.Context
	if rf, ok := ret.Get(1).(func(context.Context, pgx.TxOptions) context.Context); ok {
		r1 = rf(ctx, TxOptions)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.Context)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, pgx.TxOptions) error); ok {
		r2 = rf(ctx, TxOptions)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RollbackTransaction provides a mock function with given fields: ctx, transaction
func (_m *RepositoryMock) RollbackTransaction(ctx context.Context, transaction pgx.Tx) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepositoryMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryMock creates a new instance of RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryMock(t mockConstructorTestingTNewRepositoryMock) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
